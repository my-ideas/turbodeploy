#!/usr/bin/env bash

# USAGE ./turbodeploy <create|update|deps> [stageName]

if [ -z "$2" ]; then STAGE="dev_$(whoami)"; else STAGE=$2; fi
echo "action $1 on using stage $STAGE"

# Load the funciton definition
. ./SERVERLESS

FUNC="$MYI_FUNCTION_NAME"
BUILDZIP="$FUNC.zip"
USEPROFILE=""

IS_TYPESCRIPT=false

if [ -z "$3" ]; then USEPROFILE=""; else USEPROFILE="--profile $3"; fi
if [ -f "tsconfig.json" ]; then IS_TYPESCRIPT=true; else IS_TYPESCRIPT=false; fi

function build {
    

    if [  "$IS_TYPESCRIPT" = true ]; then
        echo "Building typescript"
        npm run build
    else
        echo "Building plain nodejs"
    fi

    # Use node_modules built for lambda if are present (eg: if you are building in osx)
    if [ -d "node_modules_awslambda" ]; then
        mv node_modules node_modules_local
        mv node_modules_awslambda node_modules
    fi

    DIST=""
    if [  "$IS_TYPESCRIPT" = true ]; then
        DIST="dist/"
        cp -r node_modules dist/node_modules    
    fi

    # Add the current git hash to version.git
    if [ -d ".git" ]; then
        echo "{\"v\":\"$(git rev-parse HEAD)\"}" > ${DIST}version.json
    fi

    if [  "$IS_TYPESCRIPT" = true ]; then
        cd dist
    fi

    echo "Remove existing artifact"
    [ -e "$BUILDZIP" ] && rm $BUILDZIP

    zip -r $BUILDZIP ./ --exclude=*.git* --exclude=*node_modules_local* --exclude=*.env* --exclude=*.idea* --exclude=*.vscode* --exclude=*.nyc_output* --exclude=*coverage* --exclude=*.zip*
    if [  "$IS_TYPESCRIPT" = true ]; then
        cp $BUILDZIP  ../
        cd ..
    fi

    if [ -d "node_modules_local" ]; then
        mv node_modules node_modules_awslambda
        mv node_modules_local node_modules
    fi

}

function update {
    build

    echo "Updating lambda"
    lambdav=$(aws lambda update-function-code    \
    $USEPROFILE \
    --function-name $FUNC \
    --zip-file fileb://./$BUILDZIP \
    --region eu-west-1 \
    --publish | python -c "import sys, json; print(json.load(sys.stdin)['Version'])")

    echo "Updating the alias"
    aws lambda update-alias \
            $USEPROFILE \
            --region eu-west-1 \
            --function-name $FUNC \
            --function-version $lambdav \
            --name $STAGE \
            --description "turbodeploy - Alias for $STAGE"
}

function package {
    echo "Deleting existing node_modules folder"
    docker run -it -v "$PWD":/var/task -e NPM_TOKEN=$(cat ~/.npmrc | awk -F= '{print $2}') elysiumtech/build-lambda-node610 npm install
    mv node_modules node_modules_awslambda
}



echo $1
case $1 in
    create)
    create
    ;;
    update)
    update
    ;;
    package)
    package
    ;;
esac
